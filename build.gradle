plugins {
	id 'maven-publish'
	id 'signing'
	id 'base'
	id 'io.github.gradle-nexus.publish-plugin' version '1.0.0'
}


// Returns true for -PsomeProperty or -PsomeProperty=true, false if undefined or other value
ext.isPropertyTrue = { p -> project.properties[p]=='' || project.properties[p]=='true' } 

ext {
	// version.txt is generated by GitHub release-please-action, and contains 
	// the version number of the latest release version.
	versionFile = rootProject.file('version.txt')
	latestReleaseVersion = versionFile.exists() ? versionFile.text.trim() : '0.1.0'
	// Add version suffix depending on whether we are building a release or not.
	// According to Gradle conventions, SP is a successor of a release, i.e:
	//    1.0.0.RELEASE < 1.0.0.SP-SNAPSHOT < 1.0.1.RELEASE
	versionSuffix = isPropertyTrue('isReleaseVersion') ? '.RELEASE' : '.SP-SNAPSHOT'
}
version = latestReleaseVersion+versionSuffix

nexusPublishing {
	repositories {
		OSSRH {
			nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
			snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
		}
	}
}

allprojects {
	apply plugin: 'signing'
	apply plugin: 'maven-publish'
	
	group = rootProject.group
	version = rootProject.version
	
	println "Configuring ${project.group}:${project.name}:${project.version}"

	publishing {
		publications {
			mavenJava(MavenPublication) {
				pom {
					afterEvaluate {
						groupId = project.group
						artifactId = project.name
						version = project.version
						description = project.description
					}
					url = 'https://github.com/fortify-ps/fortify-ssc-parser-util'
					licenses {
						license {
							name = 'MIT License'
							url = 'https://opensource.org/licenses/MIT'
						}
					}
					developers {
						developer {
							id = 'rsenden'
							name = 'Ruud Senden'
							email = 'ruud.senden@microfocus.com'
							organization = 'Micro Focus Fortify'
							organizationUrl = 'https://www.microfocus.com/en-us/cyberres/application-security'
						}
					}
					scm {
						connection = "scm:git:https://github.com/fortify-ps/${rootProject.name}.git"
						developerConnection = "scm:git:https://github.com/fortify-ps/${rootProject.name}.git"
						url = "https://github.com/fortify-ps/${rootProject.name}"
					}
				}
			}
		}
	}
	// Publish to Maven local repository when publish task is executed
	publish.finalizedBy publishToMavenLocal
	
	// Sign using ORG_GRADLE_PROJECT_signingKey and ORG_GRADLE_PROJECT_signingPassword environment variables
	signing {
		def signingKey = findProperty("signingKey")
		def signingPassword = findProperty("signingPassword")
		useInMemoryPgpKeys(signingKey, signingPassword)
		required { gradle.taskGraph.hasTask("publishToOSSRH") }
		sign publishing.publications.mavenJava
	}
}

configure(subprojects.findAll {new File(it.projectDir, "src/main/java").exists()}) {
	apply plugin: 'java-library'
	
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
	
	repositories {
		// repository with fortify artifacts
		maven {
			url  "https://dl.bintray.com/fortify/maven-public"
		}
		mavenCentral()
	}

	dependencies {
		api platform(project(':fortify-ssc-parser-util-bom'))
		// dependencies provided by plugin runtime
		compileOnly "com.fortify.plugin:plugin-api"
		compileOnly "org.slf4j:slf4j-api"
	}
	
	task sourcesJar(type: Jar) {
		from sourceSets.main.allJava
		archiveClassifier = 'sources'
	}

	task myjavadoc(type: Javadoc) {
		source = sourceSets.main.allJava
		classpath = sourceSets.main.compileClasspath
		failOnError = false
	}

	task javadocJar(type: Jar) {
		from myjavadoc
		archiveClassifier = 'javadoc'
	}
	
	publishing {
		publications {
			mavenJava(MavenPublication) {
				from components.java
				artifact sourcesJar
	            artifact javadocJar
			}
		}
	}
}



