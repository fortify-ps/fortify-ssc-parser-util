/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.util.ssc.parser;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import org.apache.commons.codec.digest.DigestUtils;

import com.fortify.plugin.api.StaticVulnerabilityBuilder;
import com.fortify.plugin.api.VulnerabilityHandler;

/**
 * This is a wrapper for SSC's {@link VulnerabilityHandler} that serves the
 * following purposes:
 * <ul>
 *  <li>If a plugin generates a duplicate instance id, a new instance id
 *      is generated based on the full vulnerability contents</li>
 *  <li>If such a newly generated instance id also exists already,
 *      the vulnerability will be ignored (as it will have the exact
 *      same contents as the already reported vulnerability)</li>
 * </ul>
 * @author Ruud Senden
 *
 */
public class HandleDuplicateIdVulnerabilityHandler implements VulnerabilityHandler {
	// TODO Should we use an in-memory set, or disk-backed set
	//      to avoid running out of memory if many vulnerabilities?
	private final Set<String> instanceIds = new HashSet<>();
	private final VulnerabilityHandler vulnerabilityHandler;
	
	/**
	 * Constructor to configure the {@link VulnerabilityHandler} to
	 * be wrapped.
	 * 
	 * @param vulnerabilityHandler
	 */
	public HandleDuplicateIdVulnerabilityHandler(VulnerabilityHandler vulnerabilityHandler) {
		this.vulnerabilityHandler = vulnerabilityHandler;
	}

	/**
	 * This method returns a {@link StaticVulnerabilityBuilder} instance
	 * backed by a {@link RecordingManager}-based proxy.
	 * @return
	 */
	public StaticVulnerabilityBuilder startStaticVulnerability(String instanceId) {
		return (StaticVulnerabilityBuilder)Proxy.newProxyInstance(
				StaticVulnerabilityBuilder.class.getClassLoader(),
				new Class[] {StaticVulnerabilityBuilder.class},
                new RecordingManager(instanceId));
	}
	
	/**
	 * This {@link InvocationHandler} handles all method calls to our
	 * {@link StaticVulnerabilityBuilder} proxy instance as follows:
	 * <ul> 
	 *  <li>If {@link StaticVulnerabilityBuilder#completeVulnerability()} is
	 *      called, we call the {@link #buildVulnerability()} method to generate
	 *      a Fortify vulnerability based on previously recorded method calls</li>
	 *  <li>All other method calls are recorded for later use by the 
	 *      {@link #buildVulnerability()} method</li>
	 * </ul>
	 * @author Ruud Senden
	 *
	 */
	private final class RecordingManager implements InvocationHandler {
		private final List<RecordedMethodInvocation> recordedMethodInvocations = new ArrayList<>();
		private final String instanceId;
		
		/**
		 * Constructor to set the instance id
		 * @param instanceId
		 */
		public RecordingManager(final String instanceId) {
			this.instanceId = instanceId;
		}

		/**
		 * Record the current method call, or build the actual vulnerability
		 * if {@link StaticVulnerabilityBuilder#completeVulnerability()} is
		 * called.
		 */
		@Override
		public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
			if ( "completeVulnerability".equals(method.getName()) ) {
				buildVulnerability();
			} else {
				recordedMethodInvocations.add(new RecordedMethodInvocation(method, args));
			}
			return null;
		}

		/**
		 * Determine the instance id to use to prevent duplicate instance id's,
		 * then call {@link #buildVulnerability(String)} to actually build the
		 * vulnerability.
		 */
		private void buildVulnerability() {
			String newInstanceId = this.instanceId;
			if ( instanceIds.contains(newInstanceId) ) {
				newInstanceId = DigestUtils.sha256Hex(new TreeSet<RecordedMethodInvocation>(recordedMethodInvocations).toString());
			}
			if ( !instanceIds.contains(newInstanceId) ) {
				buildVulnerability(newInstanceId);
				instanceIds.add(newInstanceId);
			}
		}

		/**
		 * Build the vulnerability using the wrapped {@link VulnerabilityHandler} by replaying
		 * all proxy method invocations.
		 * 
		 * @param instanceId
		 */
		private void buildVulnerability(String instanceId) {
			StaticVulnerabilityBuilder staticVulnerability = vulnerabilityHandler.startStaticVulnerability(instanceId);
			for ( RecordedMethodInvocation recordedMethodInvocation : recordedMethodInvocations ) {
				Method method = recordedMethodInvocation.getMethod();
				try {
					method.invoke(staticVulnerability, recordedMethodInvocation.getArgs());
				} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
					throw new RuntimeException("Error calling method "+method.getName(), e);
				}
			}
			staticVulnerability.completeVulnerability();
		}
	}

	/**
	 * This class stores a single method invocation as recorded by 
	 * {@link RecordingManager}.
	 * 
	 * @author Ruud Senden
	 *
	 */
	private static final class RecordedMethodInvocation implements Comparable<RecordedMethodInvocation> {
		private final Method method;
		private final Object[] args;
		public RecordedMethodInvocation(Method method, Object[] args) {
			this.method = method;
			this.args = args;
		}
		public Method getMethod() {
			return method;
		}
		public Object[] getArgs() {
			return args;
		}
		@Override
		public String toString() {
			return method.getName()+":"+Arrays.asList(args);
		}
		@Override
		public int compareTo(RecordedMethodInvocation that) {
			return this.toString().compareTo(that.toString());
		}
	}
}
